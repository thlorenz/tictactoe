/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Unauthorized: 'You are not authorized to perform this action.'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x71c7ac
  readonly name: string = 'Unauthorized'
  constructor() {
    super('You are not authorized to perform this action.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x71c7ac, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * AccountShouldBeSigner: 'Account should be signer'
 *
 * @category Errors
 * @category generated
 */
export class AccountShouldBeSignerError extends Error {
  readonly code: number = 0x71c7ad
  readonly name: string = 'AccountShouldBeSigner'
  constructor() {
    super('Account should be signer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountShouldBeSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x71c7ad, () => new AccountShouldBeSignerError())
createErrorFromNameLookup.set(
  'AccountShouldBeSigner',
  () => new AccountShouldBeSignerError()
)

/**
 * InsufficientFunds: 'Payer does not have sufficient lamports to fund the operation'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientFundsError extends Error {
  readonly code: number = 0x71c7ae
  readonly name: string = 'InsufficientFunds'
  constructor() {
    super('Payer does not have sufficient lamports to fund the operation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientFundsError)
    }
  }
}

createErrorFromCodeLookup.set(0x71c7ae, () => new InsufficientFundsError())
createErrorFromNameLookup.set(
  'InsufficientFunds',
  () => new InsufficientFundsError()
)

/**
 * InvalidGameAccount: 'Game account specified is invalid.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGameAccountError extends Error {
  readonly code: number = 0x71c7af
  readonly name: string = 'InvalidGameAccount'
  constructor() {
    super('Game account specified is invalid.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGameAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x71c7af, () => new InvalidGameAccountError())
createErrorFromNameLookup.set(
  'InvalidGameAccount',
  () => new InvalidGameAccountError()
)

/**
 * ShouldBeWaitingForOpponent: 'Game should be waiting for opponent'
 *
 * @category Errors
 * @category generated
 */
export class ShouldBeWaitingForOpponentError extends Error {
  readonly code: number = 0x71c7b0
  readonly name: string = 'ShouldBeWaitingForOpponent'
  constructor() {
    super('Game should be waiting for opponent')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ShouldBeWaitingForOpponentError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x71c7b0,
  () => new ShouldBeWaitingForOpponentError()
)
createErrorFromNameLookup.set(
  'ShouldBeWaitingForOpponent',
  () => new ShouldBeWaitingForOpponentError()
)

/**
 * IllegalMove: 'Illegal move'
 *
 * @category Errors
 * @category generated
 */
export class IllegalMoveError extends Error {
  readonly code: number = 0x71c7b1
  readonly name: string = 'IllegalMove'
  constructor() {
    super('Illegal move')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IllegalMoveError)
    }
  }
}

createErrorFromCodeLookup.set(0x71c7b1, () => new IllegalMoveError())
createErrorFromNameLookup.set('IllegalMove', () => new IllegalMoveError())

/**
 * OutOfTurnMove: 'Player attempting to move out of turn'
 *
 * @category Errors
 * @category generated
 */
export class OutOfTurnMoveError extends Error {
  readonly code: number = 0x71c7b2
  readonly name: string = 'OutOfTurnMove'
  constructor() {
    super('Player attempting to move out of turn')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OutOfTurnMoveError)
    }
  }
}

createErrorFromCodeLookup.set(0x71c7b2, () => new OutOfTurnMoveError())
createErrorFromNameLookup.set('OutOfTurnMove', () => new OutOfTurnMoveError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
