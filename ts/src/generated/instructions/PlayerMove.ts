/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { PlayerMove, playerMoveBeet } from '../types/PlayerMove'

/**
 * @category Instructions
 * @category PlayerMove
 * @category generated
 */
export type PlayerMoveInstructionArgs = {
  playerMove: PlayerMove
}
/**
 * @category Instructions
 * @category PlayerMove
 * @category generated
 */
export const PlayerMoveStruct = new beet.BeetArgsStruct<
  PlayerMoveInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['playerMove', playerMoveBeet],
  ],
  'PlayerMoveInstructionArgs'
)

export const playerMoveInstructionDiscriminator = 2

/**
 * Creates a _PlayerMove_ instruction.
 *
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PlayerMove
 * @category generated
 */
export function createPlayerMoveInstruction(
  args: PlayerMoveInstructionArgs,
  programId = new web3.PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')
) {
  const [data] = PlayerMoveStruct.serialize({
    instructionDiscriminator: playerMoveInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = []

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
